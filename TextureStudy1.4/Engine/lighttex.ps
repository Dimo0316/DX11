////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////
#define NUM_LIGHTS 2

Texture2D shaderTexture;
SamplerState SampleType;

//const buffer最好为4 float的倍数，否则创建const buffer会fail
//因为摄像机位置是世界坐标系位置，所以直接以ps const buffer形式传入
cbuffer LightBuffer
{
    float4 lightPosition[NUM_LIGHTS]; //光源位置
	float4 lightColor[NUM_LIGHTS];   //光源颜色
	float4 globalAmbient[NUM_LIGHTS]; //光源的环境光反射系数
	float4 attenuation[NUM_LIGHTS]; //衰减系数
	float4 spotattenuation[NUM_LIGHTS];
	float3 lightDirection[NUM_LIGHTS]; //平行光方向，或者spotlight下光的方向
	float shininess[NUM_LIGHTS]; //高光指数
};

cbuffer MaterialBuffer
{
	float4 Ke;  //材质的自发光
	float4 Ka;  //材质的环境光系数
};

cbuffer CameraBuffer
{
   float4 cameraPosition; //摄像机的位置
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 worldposition: POSITION;
	float3 worldnormal: NORMAL;
	float2 tex : TEXCOORD0;
	float4 Kd : DIFFUSE;
	float4 Ks: SPECULAR;

};

//一个计算spot light系数的函数
float dualConeSpotlight(float3 P, float3 lightpos, float3 lightdir, float  cosInnerCone, float cosOuterCone)
 {
 
  float3 V = normalize(P - lightpos);
 
  float cosDirection = dot(V, normalize(lightdir));
 
  return smoothstep(cosOuterCone,  cosInnerCone, cosDirection);
 }


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{

  float3 P = input.worldposition.xyz;
 
  float3 N = normalize(input.worldnormal);
  float4 textureColor = shaderTexture.Sample(SampleType, input.tex);
;

  float4 Kd = input.Kd;
  float4 Ks = input.Ks;

  float4 finalcolor = 0;
  float4 emissive = 0;
  float4 ambient = 0;
  float3 L;
  float diffuseLight = 0;
  float4 diffuse = 0;
  float3 V = 0;
  float3 H = 0;
  float specularLight = 0;
  float4 specular = 0;
  float atte ;
  float spotEffect ;
  float d;
  int i;
  for ( i = 0; i < NUM_LIGHTS; i++)
  {
   	//自发射颜色
	emissive = Ke;
    
	//计算环境光
    ambient = Ka * globalAmbient[i];
	
	//计算漫反射光
	//用LightDirection就是纯平行光,在spotlight情况下代表光的方向

	spotEffect = dualConeSpotlight(P,  lightPosition[i].xyz, lightDirection[i],spotattenuation[i].x, spotattenuation[i].y);

	//光源位置减顶点位置
     L = normalize(lightPosition[i].xyz - P);
	 d = distance(lightPosition[i].xyz, P);
	 //衰减系数
	 atte = 1 / (attenuation[i].x + attenuation[i].y * d +attenuation[i].z * d * d);
     diffuseLight = max(dot(N, L), 0);
     diffuse =   Kd* lightColor[i] * diffuseLight * atte * spotEffect;

	 //计算高光
     V = normalize(cameraPosition.xyz - P);
     H = normalize(L + V);
     specularLight = pow(max(dot(N, H), 0), shininess[i]);
 
      if (diffuseLight <= 0) 
	      specularLight = 0;
      specular = Ks * lightColor[i] * specularLight * spotEffect;

	  finalcolor +=  emissive + ambient + diffuse + specular;
	 // finalcolor = specular ;
	 }
	 finalcolor = saturate(finalcolor);
	 finalcolor = finalcolor * textureColor;

  return finalcolor;
	
}
